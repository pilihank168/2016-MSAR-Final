function makeFileGen(mainName, libDir, makeFile)

fid=fopen(makeFile, 'w');

fprintf(fid, '# Makefile for VC (Generated by %s(''%s'', ''%s'', ''%s''))\n', mfilename, mainName, libDir, makeFile);
fprintf(fid, '# usage nmake -f %s [arguments]\n', makeFile);
fprintf(fid, '# ex:\n');
fprintf(fid, '#	nmake -f %s exe ===> build %s.exe\n', makeFile, mainName);
fprintf(fid, '#	nmake -f %s clean ===> Clean *.obj, *.exe, *.lib\n\n', makeFile);

fprintf(fid, 'MAIN = %s\n', mainName);
%fprintf(fid, 'LIB = %s.lib\n', mainName);
fprintf(fid, 'COMPILER = cl.exe\n');
fprintf(fid, 'LINKER = link.exe\n');
fprintf(fid, 'LIBDIR = %s/\n', libDir);

hFiles=dir([libDir, '\*.h']);
fprintf(fid, 'HEADER =');
for i=1:length(hFiles)
	fprintf(fid, ' $(LIBDIR)%s.h', hFiles(i).name(1:end-2));
end
fprintf(fid, '\n');

cppFiles=dir([libDir, '\*.cpp']);
fprintf(fid, 'OBJ = $(MAIN).obj');
for i=1:length(cppFiles)
	fprintf(fid, ' $(LIBDIR)%s.obj', cppFiles(i).name(1:end-4));
end
fprintf(fid, '\n');

fprintf(fid, 'INCS = /Ilib\n');
fprintf(fid, 'EXE  = $(MAIN).exe\n');
fprintf(fid, 'COMPILERFLAG = $(INCS) /EHsc /O2 /nologo\n');
fprintf(fid, 'RM = del /q\n\n');

fprintf(fid, 'exe: $(EXE)\n');
%fprintf(fid, 'lib: $(LIB)\n');
fprintf(fid, 'clean:\n');
fprintf(fid, '\t$(RM) $(OBJ) $(EXE).exe\n');
fprintf(fid, '$(EXE): $(OBJ)\n');
fprintf(fid, '\t$(LINKER) $(OBJ) /OUT:$(EXE)\n');
%fprintf(fid, '$(LIB): $(OBJ)\n');
%fprintf(fid, '\tlib.exe /nologo $(OBJ) /out:$(LIB)\n');
fprintf(fid, '$(MAIN).obj: $(MAIN).cpp $(HEADER)\n'); 
fprintf(fid, '\t$(COMPILER) /c $(MAIN).cpp /Fo$(MAIN).obj $(COMPILERFLAG)\n\n');

for i=1:length(cppFiles)
	mainName=cppFiles(i).name(1:end-4);
	fprintf(fid, '$(LIBDIR)%s.obj: $(LIBDIR)%s.cpp $(LIBDIR)%s.h\n', mainName, mainName, mainName);
	fprintf(fid, '\t$(COMPILER) /c $(LIBDIR)%s.cpp /Fo$(LIBDIR)%s.obj $(COMPILERFLAG)\n', mainName, mainName);
end

fclose(fid);